#include "contiki.h"
#include "lib/random.h"
#include "sys/ctimer.h"
#include "net/uip.h"
#include "net/uip-ds6.h"
#include "net/uip-udp-packet.h"
#include "sys/ctimer.h"
#include "dev/button-sensor.h"

#ifdef WITH_COMPOWER
#include "powertrace.h"
#endif

#include <stdio.h>
#include <string.h>
#include "dev/leds.h"

#define UDP_CLIENT_PORT 8765
#define UDP_SERVER_PORT 5678

#define UDP_EXAMPLE_ID  190

#define DEBUG DEBUG_PRINT

#include "net/uip-debug.h"

#ifndef PERIOD
#define PERIOD 60
#endif

#define START_INTERVAL        (15 * CLOCK_SECOND)
#define SEND_INTERVAL        (PERIOD * CLOCK_SECOND)
#define SEND_TIME        (random_rand() % (SEND_INTERVAL))
#define MAX_PAYLOAD_LEN        30


static struct uip_udp_conn *client_conn;
static uip_ipaddr_t server_ipaddr; // Adresse IP
/*---------------------------------------------------------------------------*/
PROCESS(udp_client_process,
"UDP client process");
AUTOSTART_PROCESSES(&udp_client_process);

/*---------------------------------------------------------------------------*/
static void tcpip_handler(void) {
    char *str;
    if (uip_newdata()) { // Fonction qui détecte si l'on reçoit de nouvelle donnée
        str = uip_appdata; // Pointeur vers le paquet envoyé
        str[uip_datalen()] = '\0'; // uip_datalen() correspond à la taille du message, on ajoute '\0' afin de marquer la fin du message
        printf("%s\n", str); // Affiche le message
    }
}

static void send_packet(void *ptr) {
    char buf[MAX_PAYLOAD_LEN]; // Taille max du message 30;
    printf("Envoie d'un message à %d.%d.%d.%d", server_ipaddr.u8[0], server_ipaddr.u8[1], server_ipaddr.u8[2],
           server_ipaddr.u8[3]);
    // u8 correspond aux octets de l'adresse ip, ici ipv4 ex: 192.16.16.0
    sprintf(buf, "<3", 1); // On écrit dans buf 1 <3
    uip_udp_packet_sendto(client_conn, buf, strlen(buf), &server_ipaddr, UIP_HTONS(UDP_SERVER_PORT));
}

static void set_global_adress(void) {
    /** Construction d'une adresse IP **/
    uip_ipaddr_t ipaddr;

    uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
    uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr); // 802.3 address
    // définir les 64 derniers bits d'une adresse IP en fonction de l'adresse MAC
    uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF); // ADDR_AUTOCONF = 1
    // Add a unicast address to the interface.
}

/*---------------------------------------------------------------------------*/
PROCESS_THREAD(udp_client_process, ev, data
){
static struct etimer periodic;
static struct ctimer backoff_timer;

PROCESS_BEGIN();

PROCESS_PAUSE();

SENSORS_ACTIVATE(button_sensor);

set_global_adress();

/* new connection with remote host */
client_conn = udp_new(NULL, UIP_HTONS(UDP_SERVER_PORT), NULL);
if(client_conn == NULL) {
PRINTF("Erreur on stop tout!\n");

PROCESS_EXIT();

}
udp_bind(client_conn, UIP_HTONS(
UDP_CLIENT_PORT));

etimer_set(&periodic, SEND_INTERVAL);
while(1) {
PROCESS_YIELD();

if(ev == tcpip_event) {
tcpip_handler();

}

if(etimer_expired(&periodic) && data== &button_sensor) {
etimer_reset(&periodic);
ctimer_set(&backoff_timer, SEND_TIME, send_packet, NULL);


}
}

PROCESS_END();

}
/*---------------------------------------------------------------------------*/


